/* The following code was generated by JFlex 1.4.3 on 10/5/13 2:54 PM */

package com.webschik.doT.parsing;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;
import com.webschik.doT.parsing.DotTokenTypes;
import com.webschik.doT.config.DotConfig;

// suppress various warnings/inspections for the generated class
@SuppressWarnings ({"FieldCanBeLocal", "UnusedDeclaration", "UnusedAssignment", "AccessStaticViaInstance", "MismatchedReadAndWriteOfArray", "WeakerAccess", "SameParameterValue", "CanBeFinal", "SameReturnValue", "RedundantThrows", "ConstantConditions"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/5/13 2:54 PM from the specification file
 * <tt>/var/projects/doT/src/com/webschik/doT/parsing/doT.flex</tt>
 */
final class _DotLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int mu = 2;
  public static final int emu = 4;
  public static final int YYINITIAL = 0;
  public static final int par = 6;
  public static final int data = 10;
  public static final int comment = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\15\1\1\1\1\22\0\1\1\1\0\1\17"+
    "\1\5\1\41\2\40\1\20\2\41\1\12\2\37\1\32\1\13\1\11"+
    "\12\33\1\34\2\0\1\10\1\0\1\6\1\0\32\41\1\35\1\4"+
    "\1\36\1\7\1\40\1\0\1\27\3\41\1\25\1\26\2\41\1\21"+
    "\2\41\1\30\5\41\1\23\1\31\1\22\1\24\5\41\1\3\1\0"+
    "\1\14\1\16\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\4\0\1\1\1\3\1\2\4\3\2\4"+
    "\12\3\1\2\1\3\1\5\1\6\2\3\1\7\1\10"+
    "\1\11\2\0\1\12\1\13\1\14\1\15\2\0\1\16"+
    "\1\0\1\17\1\0\1\16\1\0\1\17\5\0\1\20"+
    "\2\0\1\1\1\0\1\21\1\10\1\0\1\22\1\23"+
    "\1\24\1\0\1\25\1\26\2\0\1\1\1\0\1\27"+
    "\1\30\2\0\1\31\2\32\1\33\1\0\1\31\3\32"+
    "\1\34\3\32\1\0\2\32\1\0\1\35\1\36\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[97];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\356\0\u01ba\0\u01dc"+
    "\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec"+
    "\0\u030e\0\u0330\0\u0352\0\356\0\u0374\0\u0396\0\u03b8\0\u03da"+
    "\0\u03fc\0\u041e\0\u01dc\0\u0440\0\356\0\356\0\356\0\356"+
    "\0\u01fe\0\u0462\0\356\0\u0484\0\u0484\0\u04a6\0\u0286\0\u0220"+
    "\0\356\0\u0286\0\u04c8\0\u04ea\0\u050c\0\u052e\0\356\0\u02ec"+
    "\0\u030e\0\u0550\0\u0572\0\356\0\356\0\u0594\0\356\0\356"+
    "\0\356\0\u05b6\0\356\0\356\0\u05d8\0\u05fa\0\u061c\0\u063e"+
    "\0\356\0\356\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8\0\356"+
    "\0\u070a\0\356\0\u072c\0\u074e\0\u0770\0\356\0\u0792\0\u07b4"+
    "\0\u07d6\0\u07f8\0\u081a\0\u083c\0\u085e\0\356\0\356\0\u0880"+
    "\0\u08a2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[97];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\1\1\7\36\1\1\10\2\11\1\12\1\10\1\13"+
    "\1\14\1\10\1\15\1\16\1\10\1\17\1\20\1\11"+
    "\1\13\1\21\1\22\1\23\1\24\3\25\1\26\3\25"+
    "\1\27\1\30\1\25\1\31\2\10\2\25\1\10\2\32"+
    "\1\33\1\34\36\10\2\32\6\10\3\35\4\10\14\35"+
    "\3\10\3\35\1\10\2\32\1\36\37\10\2\32\11\10"+
    "\1\37\4\10\11\40\1\10\2\40\4\10\1\40\3\1"+
    "\1\41\36\1\43\0\2\11\12\0\1\11\27\0\1\42"+
    "\52\0\1\43\33\0\1\44\5\0\1\43\35\0\1\45"+
    "\32\0\2\46\10\0\1\47\2\46\40\0\1\50\25\0"+
    "\4\51\1\52\12\51\1\53\22\51\1\54\2\55\1\54"+
    "\1\56\3\54\2\55\1\54\3\55\2\54\1\57\11\60"+
    "\1\54\2\60\3\54\2\60\1\0\2\61\5\0\2\61"+
    "\1\0\3\61\2\0\2\62\1\63\7\62\1\0\2\62"+
    "\3\0\2\62\1\0\2\61\5\0\2\61\1\0\3\61"+
    "\2\0\3\62\1\64\6\62\1\0\2\62\3\0\2\62"+
    "\1\0\2\61\5\0\2\61\1\0\3\61\2\0\12\62"+
    "\1\0\2\62\3\0\2\62\1\0\2\61\5\0\2\61"+
    "\1\0\3\61\2\0\7\62\1\65\2\62\1\0\2\62"+
    "\3\0\2\62\33\0\1\66\7\0\2\67\5\0\2\61"+
    "\1\0\1\61\2\67\2\0\12\62\1\0\1\70\1\62"+
    "\3\0\2\62\36\71\1\47\3\71\1\0\2\32\42\0"+
    "\1\72\47\0\3\35\4\0\14\35\3\0\3\35\3\0"+
    "\1\73\52\0\1\74\46\0\11\40\1\0\2\40\4\0"+
    "\1\40\3\0\1\75\43\0\1\76\1\77\1\100\1\101"+
    "\1\102\31\0\2\103\11\0\2\103\24\0\2\51\1\0"+
    "\37\51\4\54\1\56\13\54\1\53\23\54\1\0\37\54"+
    "\1\0\2\61\5\0\2\61\1\0\1\104\2\61\2\0"+
    "\12\62\1\0\2\62\3\0\2\62\1\0\2\61\5\0"+
    "\2\61\1\0\3\61\2\0\4\62\1\105\5\62\1\0"+
    "\2\62\3\0\2\62\1\0\2\61\5\0\2\61\1\0"+
    "\3\61\2\0\10\62\1\106\1\62\1\0\2\62\3\0"+
    "\2\62\1\0\2\67\11\0\2\67\15\0\1\66\6\0"+
    "\3\72\1\107\36\72\11\0\1\110\35\0\1\111\46\0"+
    "\1\112\30\0\2\61\5\0\2\61\1\0\3\61\2\0"+
    "\5\62\1\113\4\62\1\0\2\62\3\0\2\62\1\0"+
    "\2\61\5\0\2\61\1\0\3\61\2\0\11\62\1\114"+
    "\1\0\2\62\3\0\2\62\3\72\1\115\36\72\12\116"+
    "\1\117\27\116\1\0\2\120\5\0\2\61\1\0\1\61"+
    "\2\120\2\0\12\62\1\0\2\62\3\0\2\62\1\0"+
    "\2\61\5\0\2\61\1\0\3\61\2\0\5\62\1\121"+
    "\4\62\1\0\2\62\3\0\2\62\3\0\1\122\36\0"+
    "\12\123\1\124\27\123\12\117\1\125\27\117\1\0\2\126"+
    "\5\0\2\61\1\0\1\61\2\126\2\0\12\62\1\0"+
    "\2\62\3\0\2\62\12\123\1\124\1\123\1\127\36\123"+
    "\1\130\1\124\1\123\1\127\25\123\11\117\1\131\1\125"+
    "\27\117\12\123\1\124\1\123\1\132\37\123\1\124\1\123"+
    "\1\133\25\123\12\117\1\125\1\117\1\134\25\117\12\132"+
    "\1\135\27\132\12\123\1\124\1\123\1\136\25\123\12\117"+
    "\1\125\1\117\1\137\25\117\11\132\1\140\1\135\41\132"+
    "\1\135\1\132\1\141\37\132\1\135\1\132\1\136\25\132";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2244];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\4\0\1\1\1\11\5\1\1\11\15\1\1\11"+
    "\6\1\2\0\4\11\2\0\1\11\1\0\1\1\1\0"+
    "\1\1\1\0\1\11\5\0\1\11\2\0\1\1\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\2\0\1\1\1\0"+
    "\2\11\2\0\3\1\1\11\1\0\1\11\3\1\1\11"+
    "\3\1\1\0\2\1\1\0\2\11\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[97];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> stack = new Stack<Integer>();

    public void yypushState(int newState) {
      stack.push(yystate());
      yybegin(newState);
    }

    public void yypopState() {
      yybegin(stack.pop());
    }


  _DotLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _DotLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 106) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { yypopState(); return DotTokenTypes.CLOSE;
          }
        case 31: break;
        case 11: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return DotTokenTypes.ID;
          }
        case 32: break;
        case 12: 
          { return DotTokenTypes.ID;
          }
        case 33: break;
        case 15: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return DotTokenTypes.ID;
          }
        case 34: break;
        case 4: 
          { return DotTokenTypes.SEP;
          }
        case 35: break;
        case 14: 
          { return DotTokenTypes.STRING;
          }
        case 36: break;
        case 1: 
          { return DotTokenTypes.CONTENT;
          }
        case 37: break;
        case 21: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return DotTokenTypes.ELSE;
          }
        case 38: break;
        case 8: 
          { // backtrack over any stache characters at the end of this string
          while (yylength() > 0 && yytext().subSequence(yylength() - 1, yylength()).toString().equals("{")) {
            yypushback(1);
          }

          if (yylength() > 0 && yytext().toString().substring(yylength() - 1, yylength()).equals("\\")) {
            yypushback(1); // put the escape char back
            yypushState(emu);
          } else {
            yypushState(mu);
          }

          if (!yytext().toString().equals("")) {
              if (yytext().toString().trim().length() == 0) {
                  return DotTokenTypes.WHITE_SPACE;
              } else {
                  return DotTokenTypes.CONTENT;
              }
          }
          }
        case 39: break;
        case 10: 
          { return DotTokenTypes.EQUALS;
          }
        case 40: break;
        case 24: 
          { yypushback(3); yypopState(); yypushState(comment);
          }
        case 41: break;
        case 9: 
          { return DotTokenTypes.OPEN;
          }
        case 42: break;
        case 17: 
          { yypushback(2); yypopState();
          }
        case 43: break;
        case 3: 
          { return DotTokenTypes.INVALID;
          }
        case 44: break;
        case 23: 
          { yypushState(par); return DotTokenTypes.OPEN_PARTIAL;
          }
        case 45: break;
        case 16: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return DotTokenTypes.INTEGER;
          }
        case 46: break;
        case 6: 
          { yypopState(); return DotTokenTypes.PARTIAL_NAME;
          }
        case 47: break;
        case 25: 
          { // grab everything up to the next open stache
          // backtrack over any stache characters at the end of this string
          while (yylength() > 0 && yytext().subSequence(yylength() - 1, yylength()).toString().equals("{")) {
            yypushback(1);
          }

          if (yylength() > 0 && yytext().toString().substring(yylength() - 1, yylength()).equals("\\")) {
            yypushback(1);
          } else {
            yypopState();
          }

          return DotTokenTypes.CONTENT;
          }
        case 48: break;
        case 19: 
          { return DotTokenTypes.OPEN_INVERSE;
          }
        case 49: break;
        case 18: 
          { return DotTokenTypes.OPEN_BLOCK;
          }
        case 50: break;
        case 2: 
          { return DotTokenTypes.WHITE_SPACE;
          }
        case 51: break;
        case 29: 
          { // backtrack over any extra stache characters at the end of this string
      while (yylength() > 2 && yytext().subSequence(yylength() - 3, yylength()).toString().equals("}}")) {
        yypushback(1);
      }
      yypopState();
      return DotTokenTypes.COMMENT;
          }
        case 52: break;
        case 28: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { return DotTokenTypes.BOOLEAN;
          }
        case 53: break;
        case 27: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return DotTokenTypes.BOOLEAN;
          }
        case 54: break;
        case 20: 
          { return DotTokenTypes.OPEN_UNESCAPED;
          }
        case 55: break;
        case 26: 
          { yypopState(); return DotTokenTypes.UNCLOSED_COMMENT;
          }
        case 56: break;
        case 30: 
          { yypopState(); return DotTokenTypes.COMMENT;
          }
        case 57: break;
        case 7: 
          { yypopState(); return DotTokenTypes.DATA;
          }
        case 58: break;
        case 22: 
          { yypushState(data); return DotTokenTypes.DATA_PREFIX;
          }
        case 59: break;
        case 5: 
          { return DotTokenTypes.ESCAPE_CHAR;
          }
        case 60: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
